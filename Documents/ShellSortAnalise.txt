ShellSort(int[] : a, int : tam): int[] { //kk eae men
              [0000, 0000] (0000,         Id) {ShellSort}
              [0000, 0009] (0028,     BeginP) {(}
              [0000, 0010] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0000, 0013] (0030,     BeginC) {[}
              [0000, 0014] (0031,       EndC) {]}
          VECTOR_TYPE -> TYPE BeginC EndC 
              [0000, 0016] (0047,    SepPont) {:}
              [0000, 0018] (0000,         Id) {a}
          PARAMITER -> VECTOR_TYPE SepPont Id 
          PARAMITER_LIST -> PARAMITER 
              [0000, 0019] (0039,       SepV) {,}
              [0000, 0021] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0000, 0025] (0047,    SepPont) {:}
              [0000, 0027] (0000,         Id) {tam}
          PARAMITER -> TYPE SepPont Id 
          PARAMITER_LIST -> PARAMITER_LIST SepV PARAMITER 
              [0000, 0030] (0029,       EndP) {)}
              [0000, 0031] (0047,    SepPont) {:}
              [0000, 0033] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0000, 0036] (0030,     BeginC) {[}
              [0000, 0037] (0031,       EndC) {]}
          VECTOR_TYPE -> TYPE BeginC EndC 
          TYPE_FUNC -> VECTOR_TYPE 
              [0000, 0039] (0032,    BeginCh) {{}
|0001|      int h = tam/2;
              [0001, 0004] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0001, 0008] (0000,         Id) {h}
              [0001, 0010] (0021,      OpAtr) {=}
              [0001, 0012] (0000,         Id) {tam}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0001, 0015] (0010,    OpArdiv) {/}
          OP_AR -> OpArdiv 
              [0001, 0016] (0034,   ConstInt) {2}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0001, 0017] (0040,      SepPV) {;}
|0002|      int i, j;
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> TYPE DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMAND 
              [0002, 0004] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0002, 0008] (0000,         Id) {i}
          ATTRIBUTION -> Id 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0002, 0009] (0039,       SepV) {,}
              [0002, 0011] (0000,         Id) {j}
          ATTRIBUTION -> Id 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0002, 0012] (0040,      SepPV) {;}
|0003|      while(h >= 1){
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          DECLARATION_LIST -> DECLARATION_TYPE SepV DECLARATION_LIST 
          VAR_DECLARATION -> TYPE DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0003, 0004] (0025,    InsInWh) {while}
              [0003, 0009] (0028,     BeginP) {(}
              [0003, 0010] (0000,         Id) {h}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
              [0003, 0012] (0013,      OpReD) {>=}
          OP_RE -> OpReD 
              [0003, 0015] (0034,   ConstInt) {1}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_RL OP_RE OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0003, 0016] (0029,       EndP) {)}
              [0003, 0017] (0032,    BeginCh) {{}
|0004|          for(i = 0 to  h){
              [0004, 0008] (0027,   InsInfor) {for}
              [0004, 0011] (0028,     BeginP) {(}
              [0004, 0012] (0000,         Id) {i}
              [0004, 0014] (0021,      OpAtr) {=}
              [0004, 0016] (0034,   ConstInt) {0}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
              [0004, 0018] (0042,      IntTo) {to}
              [0004, 0022] (0000,         Id) {h}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0004, 0023] (0029,       EndP) {)}
              [0004, 0024] (0032,    BeginCh) {{}
|0005|              j = i;
              [0005, 0012] (0000,         Id) {j}
              [0005, 0014] (0021,      OpAtr) {=}
              [0005, 0016] (0000,         Id) {i}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0005, 0017] (0040,      SepPV) {;}
|0006|              while(j+h < tam){
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMAND 
              [0006, 0012] (0025,    InsInWh) {while}
              [0006, 0017] (0028,     BeginP) {(}
              [0006, 0018] (0000,         Id) {j}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0006, 0019] (0008,     OpArAd) {+}
          OP_AR -> OpArAd 
              [0006, 0020] (0000,         Id) {h}
          ATRIBVALUE -> Id 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
              [0006, 0022] (0013,      OpReD) {<}
          OP_RE -> OpReD 
              [0006, 0024] (0000,         Id) {tam}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_RL OP_RE OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0006, 0027] (0029,       EndP) {)}
              [0006, 0028] (0032,    BeginCh) {{}
|0007|                  if(a[j] > a[j+h]){
              [0007, 0016] (0022,     InsSIf) {if}
              [0007, 0018] (0028,     BeginP) {(}
              [0007, 0019] (0000,         Id) {a}
              [0007, 0020] (0030,     BeginC) {[}
              [0007, 0021] (0000,         Id) {j}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0007, 0022] (0031,       EndC) {]}
          ATRIBVALUE -> Id BeginC OPERATION_AR EndC 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
              [0007, 0024] (0013,      OpReD) {>}
          OP_RE -> OpReD 
              [0007, 0026] (0000,         Id) {a}
              [0007, 0027] (0030,     BeginC) {[}
              [0007, 0028] (0000,         Id) {j}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0007, 0029] (0008,     OpArAd) {+}
          OP_AR -> OpArAd 
              [0007, 0030] (0000,         Id) {h}
          ATRIBVALUE -> Id 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
              [0007, 0031] (0031,       EndC) {]}
          ATRIBVALUE -> Id BeginC OPERATION_AR EndC 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_RL OP_RE OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0007, 0032] (0029,       EndP) {)}
              [0007, 0033] (0032,    BeginCh) {{}
|0008|                      int temp = a[j];
              [0008, 0020] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0008, 0024] (0000,         Id) {temp}
              [0008, 0029] (0021,      OpAtr) {=}
              [0008, 0031] (0000,         Id) {a}
              [0008, 0032] (0030,     BeginC) {[}
              [0008, 0033] (0000,         Id) {j}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0008, 0034] (0031,       EndC) {]}
          ATRIBVALUE -> Id BeginC OPERATION_AR EndC 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0008, 0035] (0040,      SepPV) {;}
|0009|                      a[j] = a[j+h];
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> TYPE DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMAND 
              [0009, 0020] (0000,         Id) {a}
              [0009, 0021] (0030,     BeginC) {[}
              [0009, 0022] (0000,         Id) {j}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0009, 0023] (0031,       EndC) {]}
              [0009, 0025] (0021,      OpAtr) {=}
              [0009, 0027] (0000,         Id) {a}
              [0009, 0028] (0030,     BeginC) {[}
              [0009, 0029] (0000,         Id) {j}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0009, 0030] (0008,     OpArAd) {+}
          OP_AR -> OpArAd 
              [0009, 0031] (0000,         Id) {h}
          ATRIBVALUE -> Id 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
              [0009, 0032] (0031,       EndC) {]}
          ATRIBVALUE -> Id BeginC OPERATION_AR EndC 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id BeginC OPERATION_AR EndC OpAtr LIST_OPERATION_LG 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0009, 0033] (0040,      SepPV) {;}
|0010|                      a[j+h] = temp;
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0010, 0020] (0000,         Id) {a}
              [0010, 0021] (0030,     BeginC) {[}
              [0010, 0022] (0000,         Id) {j}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0010, 0023] (0008,     OpArAd) {+}
          OP_AR -> OpArAd 
              [0010, 0024] (0000,         Id) {h}
          ATRIBVALUE -> Id 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
              [0010, 0025] (0031,       EndC) {]}
              [0010, 0027] (0021,      OpAtr) {=}
              [0010, 0029] (0000,         Id) {temp}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id BeginC OPERATION_AR EndC OpAtr LIST_OPERATION_LG 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0010, 0033] (0040,      SepPV) {;}
|0011|                  }
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0011, 0016] (0033,      EndCh) {}}
|0012|                  j = j+h;
          COMAND -> InsSIf BeginP LIST_OPERATION_LG EndP BeginCh COMANDS_LIST EndCh 
          COMANDS_LIST -> COMAND 
              [0012, 0016] (0000,         Id) {j}
              [0012, 0018] (0021,      OpAtr) {=}
              [0012, 0020] (0000,         Id) {j}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0012, 0021] (0008,     OpArAd) {+}
          OP_AR -> OpArAd 
              [0012, 0022] (0000,         Id) {h}
          ATRIBVALUE -> Id 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0012, 0023] (0040,      SepPV) {;}
|0013|              }
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0013, 0012] (0033,      EndCh) {}}
|0014|          }
          LOOP -> InsInWh BeginP LIST_OPERATION_LG EndP BeginCh COMANDS_LIST EndCh 
          COMAND -> LOOP 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0014, 0008] (0033,      EndCh) {}}
|0015|          h = h-1;
          LOOP -> InsInfor BeginP ATTRIBUTION IntTo LIST_OPERATION_LG EndP BeginCh COMANDS_LIST EndCh 
          COMAND -> LOOP 
          COMANDS_LIST -> COMAND 
              [0015, 0008] (0000,         Id) {h}
              [0015, 0010] (0021,      OpAtr) {=}
              [0015, 0012] (0000,         Id) {h}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0015, 0013] (0008,     OpArAd) {-}
          OP_AR -> OpArAd 
              [0015, 0014] (0034,   ConstInt) {1}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0015, 0015] (0040,      SepPV) {;}
|0016|      }
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0016, 0004] (0033,      EndCh) {}}
|0017|      return a;
          LOOP -> InsInWh BeginP LIST_OPERATION_LG EndP BeginCh COMANDS_LIST EndCh 
          COMAND -> LOOP 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0017, 0004] (0048,     Return) {return}
              [0017, 0011] (0000,         Id) {a}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          RETURN_TYPE -> LIST_OPERATION_LG 
              [0017, 0012] (0040,      SepPV) {;}
|0018|  }
          RETURN -> Return RETURN_TYPE SepPV 
          COMAND -> RETURN 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0018, 0000] (0033,      EndCh) {}}
|0019|  
|0020|  
|0021|  Init():int{
          FUNC -> Id BeginP PARAMITER_LIST EndP SepPont TYPE_FUNC BeginCh COMANDS_LIST EndCh 
          LIST_FUNC -> FUNC 
              [0021, 0000] (0001,       Init) {Init}
              [0021, 0004] (0028,     BeginP) {(}
              [0021, 0005] (0029,       EndP) {)}
              [0021, 0006] (0047,    SepPont) {:}
              [0021, 0007] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
          TYPE_FUNC -> TYPE 
              [0021, 0010] (0032,    BeginCh) {{}
|0022|      output("Digite o tamanho: ");
              [0022, 0004] (0044,        Out) {output}
              [0022, 0010] (0028,     BeginP) {(}
              [0022, 0011] (0038, ConstString) {"Digite o tamanho: "}
              [0022, 0031] (0029,       EndP) {)}
              [0022, 0032] (0040,      SepPV) {;}
|0023|      int tam;
          COMAND -> Out BeginP ConstString EndP SepPV 
          COMANDS_LIST -> COMAND 
              [0023, 0004] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0023, 0008] (0000,         Id) {tam}
          ATTRIBUTION -> Id 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0023, 0011] (0040,      SepPV) {;}
|0024|  input("%var", tam);
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> TYPE DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0024, 0000] (0045,         In) {input}
              [0024, 0005] (0028,     BeginP) {(}
              [0024, 0006] (0038, ConstString) {"%var"}
              [0024, 0012] (0039,       SepV) {,}
              [0024, 0014] (0000,         Id) {tam}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0024, 0017] (0029,       EndP) {)}
              [0024, 0018] (0040,      SepPV) {;}
|0025|      int[tam] a;
          COMAND -> In BeginP ConstString SepV LIST_OPERATION_LG EndP SepPV 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0025, 0004] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0025, 0007] (0030,     BeginC) {[}
              [0025, 0008] (0000,         Id) {tam}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0025, 0011] (0031,       EndC) {]}
          VECTOR_TYPE -> TYPE BeginC OPERATION_AR EndC 
              [0025, 0013] (0000,         Id) {a}
          ATTRIBUTION -> Id 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0025, 0014] (0040,      SepPV) {;}
|0026|      output("Digite os elementos:\n");
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> VECTOR_TYPE DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0026, 0004] (0044,        Out) {output}
              [0026, 0010] (0028,     BeginP) {(}
              [0026, 0011] (0038, ConstString) {"Digite os elementos:\n"}
              [0026, 0035] (0029,       EndP) {)}
              [0026, 0036] (0040,      SepPV) {;}
|0027|      for(i = 0 to tam-1){
          COMAND -> Out BeginP ConstString EndP SepPV 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0027, 0004] (0027,   InsInfor) {for}
              [0027, 0007] (0028,     BeginP) {(}
              [0027, 0008] (0000,         Id) {i}
              [0027, 0010] (0021,      OpAtr) {=}
              [0027, 0012] (0034,   ConstInt) {0}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
              [0027, 0014] (0042,      IntTo) {to}
              [0027, 0017] (0000,         Id) {tam}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0027, 0020] (0008,     OpArAd) {-}
          OP_AR -> OpArAd 
              [0027, 0021] (0034,   ConstInt) {1}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0027, 0022] (0029,       EndP) {)}
              [0027, 0023] (0032,    BeginCh) {{}
|0028|          input("%var", a[i]);
              [0028, 0008] (0045,         In) {input}
              [0028, 0013] (0028,     BeginP) {(}
              [0028, 0014] (0038, ConstString) {"%var"}
              [0028, 0020] (0039,       SepV) {,}
              [0028, 0022] (0000,         Id) {a}
              [0028, 0023] (0030,     BeginC) {[}
              [0028, 0024] (0000,         Id) {i}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0028, 0025] (0031,       EndC) {]}
          ATRIBVALUE -> Id BeginC OPERATION_AR EndC 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0028, 0026] (0029,       EndP) {)}
              [0028, 0027] (0040,      SepPV) {;}
|0029|      }
          COMAND -> In BeginP ConstString SepV LIST_OPERATION_LG EndP SepPV 
          COMANDS_LIST -> COMAND 
              [0029, 0004] (0033,      EndCh) {}}
|0030|      output("Array antes de ordenar:\n");
          LOOP -> InsInfor BeginP ATTRIBUTION IntTo LIST_OPERATION_LG EndP BeginCh COMANDS_LIST EndCh 
          COMAND -> LOOP 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0030, 0004] (0044,        Out) {output}
              [0030, 0010] (0028,     BeginP) {(}
              [0030, 0011] (0038, ConstString) {"Array antes de ordenar:\n"}
              [0030, 0038] (0029,       EndP) {)}
              [0030, 0039] (0040,      SepPV) {;}
|0031|      int i;
          COMAND -> Out BeginP ConstString EndP SepPV 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0031, 0004] (0002,    TypeInt) {int}
          TYPE -> TypeInt 
              [0031, 0008] (0000,         Id) {i}
          ATTRIBUTION -> Id 
          DECLARATION_TYPE -> ATTRIBUTION 
              [0031, 0009] (0040,      SepPV) {;}
|0032|      for(i = 0 to tam-1){
          DECLARATION_LIST -> DECLARATION_TYPE SepPV 
          VAR_DECLARATION -> TYPE DECLARATION_LIST 
          COMAND -> VAR_DECLARATION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0032, 0004] (0027,   InsInfor) {for}
              [0032, 0007] (0028,     BeginP) {(}
              [0032, 0008] (0000,         Id) {i}
              [0032, 0010] (0021,      OpAtr) {=}
              [0032, 0012] (0034,   ConstInt) {0}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
              [0032, 0014] (0042,      IntTo) {to}
              [0032, 0017] (0000,         Id) {tam}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0032, 0020] (0008,     OpArAd) {-}
          OP_AR -> OpArAd 
              [0032, 0021] (0034,   ConstInt) {1}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0032, 0022] (0029,       EndP) {)}
              [0032, 0023] (0032,    BeginCh) {{}
|0033|          output("%int ", a[i]);
              [0033, 0008] (0044,        Out) {output}
              [0033, 0014] (0028,     BeginP) {(}
              [0033, 0015] (0038, ConstString) {"%int "}
              [0033, 0022] (0039,       SepV) {,}
              [0033, 0024] (0000,         Id) {a}
              [0033, 0025] (0030,     BeginC) {[}
              [0033, 0026] (0000,         Id) {i}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0033, 0027] (0031,       EndC) {]}
          ATRIBVALUE -> Id BeginC OPERATION_AR EndC 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0033, 0028] (0029,       EndP) {)}
              [0033, 0029] (0040,      SepPV) {;}
|0034|      }
          COMAND -> Out BeginP ConstString SepV LIST_OPERATION_LG EndP SepPV 
          COMANDS_LIST -> COMAND 
              [0034, 0004] (0033,      EndCh) {}}
|0035|      output("\n");
          LOOP -> InsInfor BeginP ATTRIBUTION IntTo LIST_OPERATION_LG EndP BeginCh COMANDS_LIST EndCh 
          COMAND -> LOOP 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0035, 0004] (0044,        Out) {output}
              [0035, 0010] (0028,     BeginP) {(}
              [0035, 0011] (0038, ConstString) {"\n"}
              [0035, 0015] (0029,       EndP) {)}
              [0035, 0016] (0040,      SepPV) {;}
|0036|      output("Array apos ordenar:\n");
          COMAND -> Out BeginP ConstString EndP SepPV 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0036, 0004] (0044,        Out) {output}
              [0036, 0010] (0028,     BeginP) {(}
              [0036, 0011] (0038, ConstString) {"Array apos ordenar:\n"}
              [0036, 0034] (0029,       EndP) {)}
              [0036, 0035] (0040,      SepPV) {;}
|0037|      a = ShellSort(a, tam);
          COMAND -> Out BeginP ConstString EndP SepPV 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0037, 0004] (0000,         Id) {a}
              [0037, 0006] (0021,      OpAtr) {=}
              [0037, 0008] (0000,         Id) {ShellSort}
              [0037, 0017] (0028,     BeginP) {(}
              [0037, 0018] (0000,         Id) {a}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0037, 0019] (0039,       SepV) {,}
              [0037, 0021] (0000,         Id) {tam}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          LI -> LIST_OPERATION_LG 
          LI -> LIST_OPERATION_LG SepV LI 
              [0037, 0024] (0029,       EndP) {)}
              [0037, 0025] (0040,      SepPV) {;}
|0038|      for(i = 0 to tam-1){
          FUNC_CALL -> Id BeginP LI EndP SepPV 
          ATRIBVALUE -> FUNC_CALL 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
          COMAND -> ATTRIBUTION 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0038, 0004] (0027,   InsInfor) {for}
              [0038, 0007] (0028,     BeginP) {(}
              [0038, 0008] (0000,         Id) {i}
              [0038, 0010] (0021,      OpAtr) {=}
              [0038, 0012] (0034,   ConstInt) {0}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          ATTRIBUTION -> Id OpAtr LIST_OPERATION_LG 
              [0038, 0014] (0042,      IntTo) {to}
              [0038, 0017] (0000,         Id) {tam}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0038, 0020] (0008,     OpArAd) {-}
          OP_AR -> OpArAd 
              [0038, 0021] (0034,   ConstInt) {1}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> OPERATION_AR OP_AR ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0038, 0022] (0029,       EndP) {)}
              [0038, 0023] (0032,    BeginCh) {{}
|0039|          output("%int ", a[i]);
              [0039, 0008] (0044,        Out) {output}
              [0039, 0014] (0028,     BeginP) {(}
              [0039, 0015] (0038, ConstString) {"%int "}
              [0039, 0022] (0039,       SepV) {,}
              [0039, 0024] (0000,         Id) {a}
              [0039, 0025] (0030,     BeginC) {[}
              [0039, 0026] (0000,         Id) {i}
          ATRIBVALUE -> Id 
          OPERATION_AR -> ATRIBVALUE 
              [0039, 0027] (0031,       EndC) {]}
          ATRIBVALUE -> Id BeginC OPERATION_AR EndC 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
              [0039, 0028] (0029,       EndP) {)}
              [0039, 0029] (0040,      SepPV) {;}
|0040|      }
          COMAND -> Out BeginP ConstString SepV LIST_OPERATION_LG EndP SepPV 
          COMANDS_LIST -> COMAND 
              [0040, 0004] (0033,      EndCh) {}}
|0041|      output("\n");
          LOOP -> InsInfor BeginP ATTRIBUTION IntTo LIST_OPERATION_LG EndP BeginCh COMANDS_LIST EndCh 
          COMAND -> LOOP 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0041, 0004] (0044,        Out) {output}
              [0041, 0010] (0028,     BeginP) {(}
              [0041, 0011] (0038, ConstString) {"\n"}
              [0041, 0015] (0029,       EndP) {)}
              [0041, 0016] (0040,      SepPV) {;}
|0042|      return 0;
          COMAND -> Out BeginP ConstString EndP SepPV 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0042, 0004] (0048,     Return) {return}
              [0042, 0011] (0034,   ConstInt) {0}
          CONST_TYPE -> ConstInt 
          ATRIBVALUE -> CONST_TYPE 
          OPERATION_AR -> ATRIBVALUE 
          OPERATION_RL -> OPERATION_AR 
          LIST_OPERATION_LG -> OPERATION_RL 
          RETURN_TYPE -> LIST_OPERATION_LG 
              [0042, 0012] (0040,      SepPV) {;}
|0043|  }
          RETURN -> Return RETURN_TYPE SepPV 
          COMAND -> RETURN 
          COMANDS_LIST -> COMANDS_LIST COMAND 
              [0043, 0000] (0033,      EndCh) {}}
|0044|            MAIN_FUNC -> Init BeginP EndP SepPont TYPE_FUNC BeginCh COMANDS_LIST EndCh 
          INICIAL -> LIST_FUNC MAIN_FUNC 
